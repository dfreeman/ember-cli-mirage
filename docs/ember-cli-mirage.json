{"jsonapi":{"version":"1.0"},"data":{"type":"project","id":"ember-cli-mirage","attributes":{"name":"ember-cli-mirage","version":"0.4.12","navigationIndex":[{"type":"classes","items":[{"id":"ember-cli-mirage/orm/collection~Collection","path":"modules/ember-cli-mirage/orm/collection~Collection","name":"Collection"},{"id":"ember-cli-mirage/db~Db","path":"modules/ember-cli-mirage/db~Db","name":"Db"},{"id":"ember-cli-mirage/db-collection~DbCollection","path":"modules/ember-cli-mirage/db-collection~DbCollection","name":"DbCollection"},{"id":"ember-cli-mirage/orm/model~Model","path":"modules/ember-cli-mirage/orm/model~Model","name":"Model"},{"id":"ember-cli-mirage/response~Response","path":"modules/ember-cli-mirage/response~Response","name":"Response"},{"id":"ember-cli-mirage/orm/schema~Schema","path":"modules/ember-cli-mirage/orm/schema~Schema","name":"Schema"},{"id":"ember-cli-mirage/serializer~Serializer","path":"modules/ember-cli-mirage/serializer~Serializer","name":"Serializer"},{"id":"ember-cli-mirage/server~Server","path":"modules/ember-cli-mirage/server~Server","name":"Server"}]}]},"relationships":{"modules":{"data":[{"type":"module","id":"ember-cli-mirage/db"},{"type":"module","id":"ember-cli-mirage/db-collection"},{"type":"module","id":"ember-cli-mirage/orm/collection"},{"type":"module","id":"ember-cli-mirage/orm/model"},{"type":"module","id":"ember-cli-mirage/orm/schema"},{"type":"module","id":"ember-cli-mirage/response"},{"type":"module","id":"ember-cli-mirage/serializer"},{"type":"module","id":"ember-cli-mirage/server"}]}}},"included":[{"type":"class","id":"ember-cli-mirage/db~Db","attributes":{"name":"Db","file":"ember-cli-mirage/db","exportType":"default","description":"<div class=\"docs-md\"><p>Your Mirage server has a database which you can interact with in your route handlers. You’ll typically use models to interact with your database data, but you can always reach into the db directly in the event you want more control.</p>\n<p>Access the db from your route handlers via <code>schema.db</code>.</p>\n<p>You can access individual DbCollections by using <code>schema.db.name</code>:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">schema.db.users  <span class=\"hljs-comment\">// would return, e.g., [ { id: 1, name: 'Yehuda' }, { id: 2, name: 'Tom '} ]</span></code></pre></div>","lineNumber":21,"access":"public","isInterface":false,"decorators":[],"tags":[{"name":"class","value":"Db"},{"name":"constructor","value":""}],"fields":[],"methods":[{"name":"loadData","description":"<div class=\"docs-md\"><p>Loads an object of data into Mirage&#39;s database.</p>\n<p>The keys of the object correspond to the DbCollections, and the values are arrays of records.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">server.db.loadData({\n  <span class=\"hljs-attr\">users</span>: [\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Yehuda'</span> },\n    { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Tom'</span> }\n  ]\n});</code></pre>\n<p>As with <code>db.collection.insert</code>, IDs will automatically be created for records that don&#39;t have them.</p></div>","lineNumber":53,"access":"public","tags":[{"name":"method","value":"loadData"}],"file":"ember-cli-mirage/db","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"data","description":"Data to load","type":"Object"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"dump","description":"<div class=\"docs-md\"><p>Logs out the contents of the Db.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">server.db.dump() <span class=\"hljs-comment\">// { users: [ name: 'Yehuda', ...</span></code></pre></div>","lineNumber":69,"access":"public","tags":[{"name":"method","value":"dump"}],"file":"ember-cli-mirage/db","returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"createCollection","description":"<div class=\"docs-md\"><p>Add an empty collection named <em>name</em> to your database. Typically you won’t need to do this yourself, since collections are automatically created for any models you have defined.</p></div>","lineNumber":85,"access":"public","tags":[{"name":"method","value":"createCollection"}],"file":"ember-cli-mirage/db","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"name","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"initialData","description":"(optional)","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"emptyData","description":"<div class=\"docs-md\"><p>Removes all data from Mirage&#39;s database.</p></div>","lineNumber":150,"access":"public","tags":[{"name":"method","value":"emptyData"}],"file":"ember-cli-mirage/db","returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-cli-mirage/db","attributes":{"file":"ember-cli-mirage/db","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-cli-mirage/db~Db"}]},"components":{"data":[]}}},{"type":"class","id":"ember-cli-mirage/db-collection~DbCollection","attributes":{"name":"DbCollection","file":"ember-cli-mirage/db-collection","exportType":"default","description":"<div class=\"docs-md\"><p>Mirage&#39;s <code>Db</code> has many <code>DbCollections</code>, which are equivalent to tables from traditional databases. They store specific types of data, for example <code>users</code> and <code>posts</code>.</p>\n<p><code>DbCollections</code> have names, like <code>users</code>, which you use to access the collection from the <code>Db</code> object.</p>\n<p>Suppose you had a <code>user</code> model defined, and the following data had been inserted into your database (either through factories or fixtures):</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> [\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Zelda'</span> },\n  { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Link'</span> }\n];</code></pre>\n<p>Then <code>db.contacts</code> would return this array.</p></div>","lineNumber":34,"access":"public","isInterface":false,"decorators":[],"tags":[{"name":"class","value":"DbCollection"},{"name":"constructor","value":""}],"fields":[],"methods":[{"name":"insert","description":"<div class=\"docs-md\"><p>Inserts <code>data</code> into the collection. <code>data</code> can be a single object\nor an array of objects. Returns the inserted record.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// Insert a single record</span>\n<span class=\"hljs-keyword\">let</span> link = db.users.insert({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Link'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">173</span> });\n\nlink;  <span class=\"hljs-comment\">// { id: 1, name: 'Link', age: 173 }</span>\n\n<span class=\"hljs-comment\">// Insert an array</span>\n<span class=\"hljs-keyword\">let</span> users = db.users.insert([\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Zelda'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">142</span> },\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Epona'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">58</span> },\n]);\n\nusers;  <span class=\"hljs-comment\">// [ { id: 2, name: 'Zelda', age: 142 }, { id: 3, name: 'Epona', age: 58 } ]</span></code></pre></div>","lineNumber":79,"access":"public","tags":[{"name":"method","value":"insert"}],"file":"ember-cli-mirage/db-collection","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"data","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"find","description":"<div class=\"docs-md\"><p>Returns a single record from the <code>collection</code> if <code>ids</code> is a single\nid, or an array of records if <code>ids</code> is an array of ids. Note\neach id can be an int or a string, but integer ids as strings\n(e.g. the string “1”) will be treated as integers.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// Given users = [{id: 1, name: 'Link'}, {id: 2, name: 'Zelda'}]</span>\n\ndb.users.find(<span class=\"hljs-number\">1</span>);      <span class=\"hljs-comment\">// {id: 1, name: 'Link'}</span>\ndb.users.find([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// [{id: 1, name: 'Link'}, {id: 2, name: 'Zelda'}]</span></code></pre></div>","lineNumber":106,"access":"public","tags":[{"name":"method","value":"find"}],"file":"ember-cli-mirage/db-collection","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"ids","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"findBy","description":"<div class=\"docs-md\"><p>Returns the first model from <code>collection</code> that matches the\nkey-value pairs in the <code>query</code> object. Note that a string\ncomparison is used. <code>query</code> is a POJO.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// Given users = [ { id: 1, name: 'Link' }, { id: 2, name: 'Zelda' } ]</span>\ndb.users.findBy({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Link'</span> }); <span class=\"hljs-comment\">// { id: 1, name: 'Link' }</span></code></pre></div>","lineNumber":138,"access":"public","tags":[{"name":"method","value":"find"}],"file":"ember-cli-mirage/db-collection","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"query","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"where","description":"<div class=\"docs-md\"><p>Returns an array of models from <code>collection</code> that match the\nkey-value pairs in the <code>query</code> object. Note that a string\ncomparison is used. <code>query</code> is a POJO.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// Given users = [ { id: 1, name: 'Link' }, { id: 2, name: 'Zelda' } ]</span>\n\ndb.users.where({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Zelda'</span> }); <span class=\"hljs-comment\">// [ { id: 2, name: 'Zelda' } ]</span></code></pre></div>","lineNumber":163,"access":"public","tags":[{"name":"method","value":"where"}],"file":"ember-cli-mirage/db-collection","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"query","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"firstOrCreate","description":"<div class=\"docs-md\"><p>Finds the first record matching the provided <em>query</em> in\n<code>collection</code>, or creates a new record using a merge of the\n<code>query</code> and optional <code>attributesForCreate</code>.</p>\n<p>Often times you may have a pattern like the following in your API stub:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// Given users = [</span>\n<span class=\"hljs-comment\">//   { id: 1, name: 'Link' },</span>\n<span class=\"hljs-comment\">//   { id: 2, name: 'Zelda' }</span>\n<span class=\"hljs-comment\">// ]</span>\n\n<span class=\"hljs-comment\">// Create Link if he doesn't yet exist</span>\n<span class=\"hljs-keyword\">let</span> records = db.users.where({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Link'</span> });\n<span class=\"hljs-keyword\">let</span> record;\n\n<span class=\"hljs-keyword\">if</span> (records.length &gt; <span class=\"hljs-number\">0</span>) {\n  record = records[<span class=\"hljs-number\">0</span>];\n} <span class=\"hljs-keyword\">else</span> {\n  record = db.users.insert({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Link'</span> });\n}</code></pre>\n<p>You can now replace this with the following:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> record = db.users.firstOrCreate({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Link'</span> });</code></pre>\n<p>An extended example using <em>attributesForCreate</em>:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> record = db.users.firstOrCreate({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Link'</span> }, { <span class=\"hljs-attr\">evil</span>: <span class=\"hljs-literal\">false</span> });</code></pre></div>","lineNumber":208,"access":"public","tags":[{"name":"method","value":"firstOrCreate"}],"file":"ember-cli-mirage/db-collection","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"query","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"attributesForCreate","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"update","description":"<div class=\"docs-md\"><p>Updates one or more records in the collection.</p>\n<p>If <em>attrs</em> is the only arg present, updates all records in the collection according to the key-value pairs in <em>attrs</em>.</p>\n<p>If <em>target</em> is present, restricts updates to those that match <em>target</em>. If <em>target</em> is a number or string, finds a single record whose id is <em>target</em> to update. If <em>target</em> is a POJO, queries <em>collection</em> for records that match the key-value pairs in <em>target</em>, and updates their <em>attrs</em>.</p>\n<p>Returns the updated record or records.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// Given users = [</span>\n<span class=\"hljs-comment\">//   {id: 1, name: 'Link'},</span>\n<span class=\"hljs-comment\">//   {id: 2, name: 'Zelda'}</span>\n<span class=\"hljs-comment\">// ]</span>\n\ndb.users.update({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Ganon'</span>}); <span class=\"hljs-comment\">// db.users = [{id: 1, name: 'Ganon'}, {id: 2, name: 'Ganon'}]</span>\ndb.users.update(<span class=\"hljs-number\">1</span>, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Young Link'</span>}); <span class=\"hljs-comment\">// db.users = [{id: 1, name: 'Young Link'}, {id: 2, name: 'Zelda'}]</span>\ndb.users.update({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Link'</span>}, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Epona'</span>}); <span class=\"hljs-comment\">// db.users = [{id: 1, name: 'Epona'}, {id: 2, name: 'Zelda'}]</span></code></pre></div>","lineNumber":247,"access":"public","tags":[{"name":"method","value":"update"}],"file":"ember-cli-mirage/db-collection","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"target","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"attrs","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"remove","description":"<div class=\"docs-md\"><p>Removes one or more records in <em>collection</em>.</p>\n<p>If <em>target</em> is undefined, removes all records. If <em>target</em> is a number or string, removes a single record using <em>target</em> as id. If <em>target</em> is a POJO, queries <em>collection</em> for records that match the key-value pairs in <em>target</em>, and removes them from the collection.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// Given users = [</span>\n<span class=\"hljs-comment\">//   {id: 1, name: 'Link'},</span>\n<span class=\"hljs-comment\">//   {id: 2, name: 'Zelda'}</span>\n<span class=\"hljs-comment\">// ]</span>\n\ndb.users.remove(); <span class=\"hljs-comment\">// db.users = []</span>\ndb.users.remove(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// db.users = [{id: 2, name: 'Zelda'}]</span>\ndb.users.remove({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Zelda'</span>}); <span class=\"hljs-comment\">// db.users = [{id: 1, name: 'Link'}]</span></code></pre></div>","lineNumber":316,"access":"public","tags":[{"name":"method","value":"remove"}],"file":"ember-cli-mirage/db-collection","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"target","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-cli-mirage/db-collection","attributes":{"file":"ember-cli-mirage/db-collection","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-cli-mirage/db-collection~DbCollection"}]},"components":{"data":[]}}},{"type":"class","id":"ember-cli-mirage/orm/collection~Collection","attributes":{"name":"Collection","file":"ember-cli-mirage/orm/collection","exportType":"default","description":"<div class=\"docs-md\"><p>Collections represent arrays of models. They are returned by a hasMany association, or by one of the ModelClass query methods:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> posts = user.blogPosts;\n<span class=\"hljs-keyword\">let</span> posts = schema.blogPosts.all();\n<span class=\"hljs-keyword\">let</span> posts = schema.blogPosts.find([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]);\n<span class=\"hljs-keyword\">let</span> posts = schema.blogPosts.where({ <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> });</code></pre>\n<p>Note that there is also a <code>PolymorphicCollection</code> class that is identical to <code>Collection</code>, except it can contain a heterogeneous array of models. Thus, it has no <code>modelName</code> property. This lets serializers and other parts of the system interact with it differently.</p></div>","lineNumber":20,"access":"public","isInterface":false,"decorators":[],"tags":[{"name":"class","value":"Collection"},{"name":"constructor","value":""}],"fields":[{"name":"modelName","description":"<div class=\"docs-md\"><p>The dasherized model name this Collection represents.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> posts = user.blogPosts;\n\nposts.modelName; <span class=\"hljs-comment\">// \"blog-post\"</span></code></pre>\n<p>The model name is separate from the actual models, since Collections can be empty.</p></div>","lineNumber":42,"access":"public","tags":[],"file":"ember-cli-mirage/orm/collection","type":"String","isStatic":false,"decorators":[]},{"name":"models","description":"<div class=\"docs-md\"><p>The underlying plain JavaScript array of Models in this Collection.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">posts.models <span class=\"hljs-comment\">// [ post:1, post:2, ... ]</span></code></pre>\n<p>While Collections have many array-ish methods like <code>filter</code> and <code>sort</code>, it\ncan be useful to work with the plain array if you want to work with methods\nlike <code>map</code>, or use the <code>[]</code> accessor.</p>\n<p>For example, in testing you might want to assert against a model from the\ncollection:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> newPost = user.posts.models[<span class=\"hljs-number\">0</span>].title;\n\nassert.equal(newPost, <span class=\"hljs-string\">\"My first post\"</span>);</code></pre></div>","lineNumber":68,"access":"public","tags":[],"file":"ember-cli-mirage/orm/collection","type":"Array","isStatic":false,"decorators":[]}],"methods":[{"name":"update","description":"<div class=\"docs-md\"><p>Updates each model in the collection, and immediately persists all changes to the db.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> posts = user.blogPosts;\n\nposts.update(<span class=\"hljs-string\">'published'</span>, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// the db was updated for all posts</span></code></pre></div>","lineNumber":101,"access":"public","tags":[{"name":"method","value":"update"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"any","description":"this","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"key","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"val","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"save","description":"<div class=\"docs-md\"><p>Saves all models in the collection.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> posts = user.blogPosts;\n\nposts.models[<span class=\"hljs-number\">0</span>].published = <span class=\"hljs-literal\">true</span>;\n\nposts.save(); <span class=\"hljs-comment\">// all posts saved to db</span></code></pre></div>","lineNumber":122,"access":"public","tags":[{"name":"method","value":"save"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"any","description":"this","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"reload","description":"<div class=\"docs-md\"><p>Reloads each model in the collection.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> posts = author.blogPosts;\n\n<span class=\"hljs-comment\">// ...</span>\n\nposts.reload(); <span class=\"hljs-comment\">// reloads data for each post from the db</span></code></pre></div>","lineNumber":143,"access":"public","tags":[{"name":"method","value":"reload"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"any","description":"this","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"destroy","description":"<div class=\"docs-md\"><p>Destroys the db record for all models in the collection.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> posts = user.blogPosts;\n\nposts.destroy(); <span class=\"hljs-comment\">// all posts removed from db</span></code></pre></div>","lineNumber":162,"access":"public","tags":[{"name":"method","value":"destroy"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"any","description":"this","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"add","description":"<div class=\"docs-md\"><p>Adds a model to this collection.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">posts.length; <span class=\"hljs-comment\">// 1</span>\n\nposts.add(newPost);\n\nposts.length; <span class=\"hljs-comment\">// 2</span></code></pre></div>","lineNumber":184,"access":"public","tags":[{"name":"method","value":"add"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"any","description":"this","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"model","description":"","type":"Model"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"remove","description":"<div class=\"docs-md\"><p>Removes a model from this collection.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">posts.length; <span class=\"hljs-comment\">// 5</span>\n\n<span class=\"hljs-keyword\">let</span> firstPost = posts.models[<span class=\"hljs-number\">0</span>];\nposts.remove(firstPost);\nposts.save();\n\nposts.length; <span class=\"hljs-comment\">// 4</span></code></pre></div>","lineNumber":208,"access":"public","tags":[{"name":"method","value":"remove"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"any","description":"this","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"model","description":"","type":"Model"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"includes","description":"<div class=\"docs-md\"><p>Checks if the Collection includes the given model.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">posts.includes(newPost);</code></pre>\n<p>Works by checking if the given model name and id exists in the Collection,\nmaking it a bit more flexible than strict object equality.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = server.create(<span class=\"hljs-string\">'post'</span>);\n<span class=\"hljs-keyword\">let</span> programming = server.create(<span class=\"hljs-string\">'tag'</span>, { <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'Programming'</span> });\n\nvisit(<span class=\"hljs-string\">`/posts/<span class=\"hljs-subst\">${post.id}</span>`</span>);\nclick(<span class=\"hljs-string\">'.tag-selector'</span>);\nclick(<span class=\"hljs-string\">'.tag:contains(Programming)'</span>);\n\npost.reload();\nassert.ok(post.tags.includes(programming));</code></pre></div>","lineNumber":244,"access":"public","tags":[{"name":"method","value":"includes"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"Boolean","description":"","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"filter","description":"<div class=\"docs-md\"><p>Returns a new Collection with its models filtered according to the provided <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"  class=\"docs-md__a\">callback function</a>.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> publishedPosts = user.posts.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> post.isPublished);</code></pre></div>","lineNumber":259,"access":"public","tags":[{"name":"method","value":"filter"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"Collection","description":"","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"f","description":"","type":"Function"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"sort","description":"<div class=\"docs-md\"><p>Returns a new Collection with its models sorted according to the provided <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters\"  class=\"docs-md__a\">compare function</a>.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> postsByTitleAsc = user.posts.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> b.title &lt; a.title;\n});</code></pre></div>","lineNumber":279,"access":"public","tags":[{"name":"method","value":"sort"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"Collection","description":"","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"f","description":"","type":"Function"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"slice","description":"<div class=\"docs-md\"><p>Returns a new Collection with a subset of its models selected from <code>begin</code> to <code>end</code>.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> firstThreePosts = user.posts.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>);</code></pre></div>","lineNumber":298,"access":"public","tags":[{"name":"method","value":"slice"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"Collection","description":"","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"begin","description":"","type":"Integer"},{"nullable":null,"spread":false,"optional":false,"name":"end","description":"","type":"Integer"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"mergeCollection","description":"<div class=\"docs-md\"><p>Modifies the Collection by merging the models from another collection.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">user.posts.mergeCollection(newPosts);\nuser.posts.save();</code></pre></div>","lineNumber":317,"access":"public","tags":[{"name":"method","value":"mergeCollection"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"any","description":"this","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"collection","description":"","type":"Collection"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"toString","description":"<div class=\"docs-md\"><p>Simple string representation of the collection and id.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">user.posts.toString(); <span class=\"hljs-comment\">// collection:post(post:1,post:4)</span></code></pre></div>","lineNumber":334,"access":"public","tags":[{"name":"method","value":"toString"}],"file":"ember-cli-mirage/orm/collection","returns":{"type":"String","description":"","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[{"name":"length","description":"<div class=\"docs-md\"><p>The number of models in the collection.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">user.posts.length; <span class=\"hljs-comment\">// 2</span></code></pre></div>","lineNumber":82,"access":"public","tags":[],"file":"ember-cli-mirage/orm/collection","type":"Integer","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false}],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-cli-mirage/orm/collection","attributes":{"file":"ember-cli-mirage/orm/collection","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-cli-mirage/orm/collection~Collection"}]},"components":{"data":[]}}},{"type":"class","id":"ember-cli-mirage/orm/model~Model","attributes":{"name":"Model","file":"ember-cli-mirage/orm/model","exportType":"default","description":"<div class=\"docs-md\"><p>Models wrap your database and allow you to define relationships.</p>\n<p>As a clarifying point, Mirage model instances only exist within Mirage&#39;s server, and are not shared directly with your Ember app. The only way to get Mirage models into your Ember app is via an API call. This means you should never create a Mirage model and, for example, pass it directly into an Ember component. They exist solely to help you manage the data and relationships in your fake backend.</p>\n<p>If you&#39;re using Ember Data and version 0.3.3. of Mirage or later, your Mirage model definitions (with relationships) will be detected and auto-generated for you, so you don&#39;t need to define the files yourself. If you&#39;re not, you can define models by adding files under <code>/models</code> or using the provided generator:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-attribute\">ember g mirage-model blog-post</span></code></pre><p>This would create the following file:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/models/blog-post.js</span>\n<span class=\"hljs-keyword\">import</span> { Model } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-cli-mirage'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Model;</code></pre>\n<p><strong>Class vs. instance methods</strong></p>\n<p>The methods documented below apply to <em>instances</em> of models, but you&#39;ll typically use the <code>Schema</code> to access the model <em>class</em>, which can be used to find or create instances.</p>\n<p>You can find the Class methods documented under the <code>Schema</code> API docs.</p>\n<p><strong>Accessing properties and relationships</strong></p>\n<p>You can access properites (fields) and relationships directly off of models.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">user.name;    <span class=\"hljs-comment\">// 'Sam'</span>\nuser.team;    <span class=\"hljs-comment\">// Team model</span>\nuser.teamId;  <span class=\"hljs-comment\">// Team id (foreign key)</span></code></pre>\n<p>Mirage Models are schemaless in their attributes, but their relationship schema is known.</p>\n<p>For example,</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> user = schema.users.create();\nuser.attrs  <span class=\"hljs-comment\">// { }</span>\nuser.name   <span class=\"hljs-comment\">// undefined</span>\n\n<span class=\"hljs-keyword\">let</span> user = schema.users.create({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Sam'</span> });\nuser.attrs  <span class=\"hljs-comment\">// { name: 'Sam' }</span>\nuser.name   <span class=\"hljs-comment\">// 'Sam'</span></code></pre>\n<p>However, if a <code>user</code> has a <code>posts</code> relationships defined,</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> user = schema.users.create();\nuser.posts  <span class=\"hljs-comment\">// returns an empty Posts Collection</span></code></pre></div>","lineNumber":73,"access":"public","isInterface":false,"decorators":[],"tags":[{"name":"class","value":"Model"},{"name":"constructor","value":""}],"fields":[{"name":"attrs","description":"<div class=\"docs-md\"><p>Returns the attributes of your model.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = schema.blogPosts.find(<span class=\"hljs-number\">1</span>);\npost.attrs; <span class=\"hljs-comment\">// {id: 1, title: 'Lorem Ipsum', publishedAt: '2012-01-01 10:00:00'}</span></code></pre>\n<p>Note that you can also access individual attributes directly off a model, e.g. <code>post.title</code>.</p></div>","lineNumber":104,"access":"public","tags":[],"file":"ember-cli-mirage/orm/model","type":"any","isStatic":false,"decorators":[]}],"methods":[{"name":"save","description":"<div class=\"docs-md\"><p>Create or saves the model.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = blogPosts.new({ <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Lorem ipsum'</span> });\npost.id; <span class=\"hljs-comment\">// null</span>\n\npost.save();\npost.id; <span class=\"hljs-comment\">// 1</span>\n\npost.title = <span class=\"hljs-string\">'Hipster ipsum'</span>; <span class=\"hljs-comment\">// db has not been updated</span>\npost.save();                  <span class=\"hljs-comment\">// ...now the db is updated</span></code></pre></div>","lineNumber":132,"access":"public","tags":[{"name":"method","value":"save"}],"file":"ember-cli-mirage/orm/model","returns":{"type":"any","description":"this","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"update","description":"<div class=\"docs-md\"><p>Updates the record in the db.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = blogPosts.find(<span class=\"hljs-number\">1</span>);\npost.update(<span class=\"hljs-string\">'title'</span>, <span class=\"hljs-string\">'Hipster ipsum'</span>); <span class=\"hljs-comment\">// the db was updated</span>\npost.update({\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Lorem ipsum'</span>,\n  <span class=\"hljs-attr\">created_at</span>: <span class=\"hljs-string\">'before it was cool'</span>\n});</code></pre></div>","lineNumber":171,"access":"public","tags":[{"name":"method","value":"update"}],"file":"ember-cli-mirage/orm/model","returns":{"type":"any","description":"this","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"key","description":"","type":"String"},{"nullable":null,"spread":false,"optional":false,"name":"val","description":"","type":"String"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"destroy","description":"<div class=\"docs-md\"><p>Destroys the db record.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = blogPosts.find(<span class=\"hljs-number\">1</span>);\npost.destroy(); <span class=\"hljs-comment\">// removed from the db</span></code></pre></div>","lineNumber":206,"access":"public","tags":[{"name":"method","value":"destroy"}],"file":"ember-cli-mirage/orm/model","returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"isNew","description":"<div class=\"docs-md\"><p>Boolean, true if the model has not been persisted yet to the db.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = blogPosts.new({<span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Lorem ipsum'</span>});\npost.isNew(); <span class=\"hljs-comment\">// true</span>\npost.id;      <span class=\"hljs-comment\">// null</span>\n\npost.save();  <span class=\"hljs-comment\">// true</span>\npost.isNew(); <span class=\"hljs-comment\">// false</span>\npost.id;      <span class=\"hljs-comment\">// 1</span></code></pre></div>","lineNumber":232,"access":"public","tags":[{"name":"method","value":"isNew"}],"file":"ember-cli-mirage/orm/model","returns":{"type":"Boolean","description":"","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"isSaved","description":"<div class=\"docs-md\"><p>Boolean, opposite of <code>isNew</code></p></div>","lineNumber":255,"access":"public","tags":[{"name":"method","value":"isSaved"}],"file":"ember-cli-mirage/orm/model","returns":{"type":"Boolean","description":"","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"reload","description":"<div class=\"docs-md\"><p>Reload a model&#39;s data from the database.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = blogPosts.find(<span class=\"hljs-number\">1</span>);\npost.attrs;     <span class=\"hljs-comment\">// {id: 1, title: 'Lorem ipsum'}</span>\n\npost.title = <span class=\"hljs-string\">'Hipster ipsum'</span>;\npost.title;     <span class=\"hljs-comment\">// 'Hipster ipsum';</span>\n\npost.reload();  <span class=\"hljs-comment\">// true</span>\npost.title;     <span class=\"hljs-comment\">// 'Lorem ipsum'</span></code></pre></div>","lineNumber":277,"access":"public","tags":[{"name":"method","value":"reload"}],"file":"ember-cli-mirage/orm/model","returns":{"type":"any","description":"this","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"toString","description":"<div class=\"docs-md\"><p>Simple string representation of the model and id.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = blogPosts.find(<span class=\"hljs-number\">1</span>);\npost.toString(); <span class=\"hljs-comment\">// \"model:blogPost:1\"</span></code></pre></div>","lineNumber":986,"access":"public","tags":[{"name":"method","value":"toString"}],"file":"ember-cli-mirage/orm/model","returns":{"type":"String","description":"","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-cli-mirage/orm/model","attributes":{"file":"ember-cli-mirage/orm/model","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-cli-mirage/orm/model~Model"}]},"components":{"data":[]}}},{"type":"class","id":"ember-cli-mirage/orm/schema~Schema","attributes":{"name":"Schema","file":"ember-cli-mirage/orm/schema","exportType":"default","description":"<div class=\"docs-md\"><p>The primary use of the <code>Schema</code> class is to use it to find Models and Collectiosn via the <code>Model</code> class methods.</p>\n<p>The <code>Schema</code> is most often accessed via the first parameter to a route handler:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'posts'</span>, schema =&gt; {\n  <span class=\"hljs-keyword\">return</span> schema.posts.where({ <span class=\"hljs-attr\">isAdmin</span>: <span class=\"hljs-literal\">false</span> });\n});</code></pre>\n<p>It is also available from the <code>.schema</code> property of a <code>server</code> instance:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">server.schema.users.create({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Yehuda'</span> });</code></pre>\n<p>To work with the Model or Collection returned from one of the methods below, refer to the instance methods in the API docs for the <code>Model</code> and <code>Collection</code> classes.</p></div>","lineNumber":33,"access":"public","isInterface":false,"decorators":[],"tags":[{"name":"class","value":"Schema"},{"name":"constructor","value":""}],"fields":[{"name":"db","description":"<div class=\"docs-md\"><p>Returns Mirage&#39;s database. See the <code>Db</code> docs for the db&#39;s API.</p></div>","lineNumber":45,"access":"public","tags":[],"file":"ember-cli-mirage/orm/schema","type":"Object","isStatic":false,"decorators":[]}],"methods":[{"name":"new","description":"<div class=\"docs-md\"><p>Create a new unsaved model instance with attributes <em>attrs</em>.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = blogPosts.new({ <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Lorem ipsum'</span> });\npost.title;   <span class=\"hljs-comment\">// Lorem ipsum</span>\npost.id;      <span class=\"hljs-comment\">// null</span>\npost.isNew(); <span class=\"hljs-comment\">// true</span></code></pre></div>","lineNumber":169,"access":"public","tags":[{"name":"method","value":"new"}],"file":"ember-cli-mirage/orm/schema","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"type","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"attrs","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"create","description":"<div class=\"docs-md\"><p>Create a new model instance with attributes <em>attrs</em>, and insert it into the database.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = blogPosts.create({<span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Lorem ipsum'</span>});\npost.title;   <span class=\"hljs-comment\">// Lorem ipsum</span>\npost.id;      <span class=\"hljs-comment\">// 1</span>\npost.isNew(); <span class=\"hljs-comment\">// false</span></code></pre></div>","lineNumber":188,"access":"public","tags":[{"name":"method","value":"create"}],"file":"ember-cli-mirage/orm/schema","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"type","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"attrs","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"all","description":"<div class=\"docs-md\"><p>Return all models in the database.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> posts = blogPosts.all();\n<span class=\"hljs-comment\">// [post:1, post:2, ...]</span></code></pre></div>","lineNumber":204,"access":"public","tags":[{"name":"method","value":"all"}],"file":"ember-cli-mirage/orm/schema","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"type","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"none","description":"<div class=\"docs-md\"><p>Return an empty collection of type <code>type</code>.</p></div>","lineNumber":217,"access":"public","tags":[{"name":"method","value":"none"}],"file":"ember-cli-mirage/orm/schema","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"type","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"find","description":"<div class=\"docs-md\"><p>Return one or many models in the database by id.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = blogPosts.find(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">let</span> posts = blogPosts.find([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);</code></pre></div>","lineNumber":234,"access":"public","tags":[{"name":"method","value":"find"}],"file":"ember-cli-mirage/orm/schema","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"type","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"ids","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"findBy","description":"<div class=\"docs-md\"><p>Returns the first model in the database that matches the key-value pairs in the <code>query</code> object. Note that a string comparison is used.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = blogPosts.findBy({ <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> });</code></pre></div>","lineNumber":260,"access":"public","tags":[{"name":"method","value":"findBy"}],"file":"ember-cli-mirage/orm/schema","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"type","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"attributeName","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"where","description":"<div class=\"docs-md\"><p>Return an array of models in the database matching the key-value pairs in <em>query</em>. Note that a string comparison is used.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> posts = blogPosts.where({ <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> });</code></pre></div>","lineNumber":279,"access":"public","tags":[{"name":"method","value":"where"}],"file":"ember-cli-mirage/orm/schema","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"type","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"query","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"first","description":"<div class=\"docs-md\"><p>Returns the first model in the database.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">let</span> post = blogPosts.first();</code></pre></div>","lineNumber":297,"access":"public","tags":[{"name":"method","value":"first"}],"file":"ember-cli-mirage/orm/schema","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"type","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-cli-mirage/orm/schema","attributes":{"file":"ember-cli-mirage/orm/schema","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-cli-mirage/orm/schema~Schema"}]},"components":{"data":[]}}},{"type":"class","id":"ember-cli-mirage/response~Response","attributes":{"name":"Response","file":"ember-cli-mirage/response","exportType":"default","description":"<div class=\"docs-md\"><p>You can use this class when you want more control over your route handlers response.</p>\n<p>Pass the <code>code</code>, <code>headers</code> and <code>data</code> into the constructor and return an instance from any route handler.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">import</span> { Response } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-cli-mirage'</span>;\n\n<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'/users'</span>, () =&gt; {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Response(<span class=\"hljs-number\">400</span>, { <span class=\"hljs-attr\">some</span>: <span class=\"hljs-string\">'header'</span> }, { <span class=\"hljs-attr\">errors</span>: [ <span class=\"hljs-string\">'name cannot be blank'</span>] });\n});</code></pre></div>","lineNumber":16,"access":"public","isInterface":false,"decorators":[],"tags":[],"fields":[],"methods":[],"accessors":[],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-cli-mirage/response","attributes":{"file":"ember-cli-mirage/response","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-cli-mirage/response~Response"}]},"components":{"data":[]}}},{"type":"class","id":"ember-cli-mirage/serializer~Serializer","attributes":{"name":"Serializer","file":"ember-cli-mirage/serializer","exportType":"default","description":"<div class=\"docs-md\"><p>Serializers are responsible for formatting your route handler&#39;s response.</p>\n<p>The application serializer (<code>/mirage/serializers/application.js</code>) will apply to every response. To make specific customizations, define per-model serializers (e.g. <code>/mirage/serializers/blog-post.js</code>).</p>\n<p>Any Model or Collection returned from a route handler will pass through the serializer layer. Highest priority will be given to a model-specific serializer, then the application serializer, then the default serializer.</p>\n<p>Mirage ships with three named serializers:</p>\n<ul>\n<li><p><strong>JSONAPISerializer</strong>, to simulate JSON:API compliant servers:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/serializers/application.js</span>\n<span class=\"hljs-keyword\">import</span> { JSONAPISerializer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-cli-mirage'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> JSONAPISerializer;</code></pre>\n</li>\n<li><p><strong>ActiveModelSerializer</strong>, to fake Rails backends that use AMS-style responses:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/serializers/application.js</span>\n<span class=\"hljs-keyword\">import</span> { ActiveModelSerializer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-cli-mirage'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ActiveModelSerializer;</code></pre>\n</li>\n<li><p><strong>RestSerializer</strong>, to fake backends that match Ember Data&#39;s RestSerializer expected response format:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/serializers/application.js</span>\n<span class=\"hljs-keyword\">import</span> { RestSerializer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-cli-mirage'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> RestSerializer;</code></pre>\n</li>\n</ul>\n<p>Additionally, Mirage has a basic Serializer class which you can customize using the hooks documented below:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/serializers/application.js</span>\n<span class=\"hljs-keyword\">import</span> { Serializer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-cli-mirage'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Serializer;</code></pre>\n<p>When writing model-specific serializers, remember to extend from your application serializer:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/serializers/blog-post.js</span>\n<span class=\"hljs-keyword\">import</span> ApplicationSerializer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./application'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ApplicationSerializer.extend({\n  <span class=\"hljs-attr\">include</span>: [<span class=\"hljs-string\">'comments'</span>]\n});</code></pre></div>","lineNumber":75,"access":"public","isInterface":false,"decorators":[],"tags":[{"name":"class","value":"Serializer"},{"name":"constructor","value":""}],"fields":[{"name":"attrs","description":"<div class=\"docs-md\"><p>Use this property on a model serializer to whitelist attributes that will be used in your JSON payload.</p>\n<p>For example, if you had a <code>blog-post</code> model in your database that looked like</p>\n<pre class=\"docs-md__code\"><code>{\n  <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\n  title: <span class=\"hljs-string\">'Lorem ipsum'</span>,\n  createdAt: <span class=\"hljs-string\">'2014-01-01 10:00:00'</span>,\n  updatedAt: <span class=\"hljs-string\">'2014-01-03 11:42:12'</span>\n}</code></pre><p>and you just wanted <code>id</code> and <code>title</code>, you could write</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/serializers/blog-post.js</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Serializer.extend({\n  <span class=\"hljs-attr\">attrs</span>: [<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'title'</span>]\n});</code></pre>\n<p>and the payload would look like</p>\n<pre class=\"docs-md__code\"><code>{\n  <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\n  title: <span class=\"hljs-string\">'Lorem ipsum'</span>\n}</code></pre></div>","lineNumber":118,"access":"public","tags":[],"file":"ember-cli-mirage/serializer","type":"any","isStatic":false,"decorators":[]},{"name":"include","description":"<div class=\"docs-md\"><p>Use this property on a model serializer to specify related models you&#39;d like to include in your JSON payload. (These can be considered default server-side includes.)</p>\n<p>For example, if you had an <code>author</code> with many <code>blog-post</code>s:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/models/author.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Model.extend({\n  <span class=\"hljs-attr\">blogPosts</span>: hasMany()\n});</code></pre>\n<p>and you wanted to sideload these, specify so in the <code>include</code> key:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/serializers/author.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Serializer.extend({\n  <span class=\"hljs-attr\">include</span>: [<span class=\"hljs-string\">'blogPosts'</span>]\n});</code></pre>\n<p>Now a response to a request for an author would look like this:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-selector-tag\">GET</span> /<span class=\"hljs-selector-tag\">authors</span>/<span class=\"hljs-selector-tag\">1</span>\n\n{\n  <span class=\"hljs-attribute\">author</span>: {\n    <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">'Link'</span>,\n    <span class=\"hljs-attribute\">blogPostIds</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n  },\n  <span class=\"hljs-attribute\">blogPosts</span>: [\n    {<span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attribute\">authorId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'Lorem'</span>},\n    {<span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attribute\">authorId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'Ipsum'</span>}\n  ]\n}</code></pre><p>You can also define <code>include</code> as a function so it can be determined dynamically:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/serializers/author.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Serializer.extend({\n  <span class=\"hljs-attr\">include</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">request</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (request.queryParams.posts) {\n      <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">'blogPosts'</span>];\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> [];\n    }\n  }\n});</code></pre>\n<p><strong>Query param includes for JSONAPISerializer</strong></p>\n<p>The JSONAPISerializer supports the use of <code>include</code> query parameter to return compound documents out of the box.</p>\n<p>For versions of Ember Data before 2.5, you&#39;ll need to add <code>&#39;ds-finder-include&#39;: true</code> to your app FEATURES object:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// config/environment.js</span>\n<span class=\"hljs-keyword\">var</span> ENV = {\n  <span class=\"hljs-attr\">EmberENV</span>: {\n    <span class=\"hljs-attr\">FEATURES</span>: {\n      <span class=\"hljs-string\">'ds-finder-include'</span>: <span class=\"hljs-literal\">true</span>\n    }\n  }\n};</code></pre>\n<p>To tell Mirage to sideload blogPosts when we find all authors we can do the following:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// routes/authors.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Ember.Route.extend({\n  model() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.store.findAll(<span class=\"hljs-string\">'author'</span>, { <span class=\"hljs-attr\">include</span>: <span class=\"hljs-string\">'blogPosts'</span> });\n  }\n}</code></pre>\n<p>The above will make a GET request to <code>/api/authors?include=blogPosts</code>, and then the appropriate Mirage route handler will be invoked. When it comes time to serialize the response, the JSONAPISerializer will inspect the query params of the request, see that the blogPosts relationship is present, and then proceed as if this relationship was specified directly in the include: [] array on the serializer itself.</p>\n<p>Note that, in accordance with the spec, Mirage gives precedence to an ?include query param over a default include: [] array that you might have specified directly on the serializer. Default includes will still be in effect, however, if a request does not have an ?include query param.</p></div>","lineNumber":209,"access":"public","tags":[],"file":"ember-cli-mirage/serializer","type":"any","isStatic":false,"decorators":[]},{"name":"root","description":"<div class=\"docs-md\"><p>Set whether your JSON response should have a root key in it.</p>\n<p><em>Doesn&#39;t apply to JSONAPISerializer.</em></p>\n<p>Defaults to true, so a request for an author looks like:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-selector-tag\">GET</span> /<span class=\"hljs-selector-tag\">authors</span>/<span class=\"hljs-selector-tag\">1</span>\n\n{\n  <span class=\"hljs-attribute\">author</span>: {\n    <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">'Link'</span>\n  }\n}</code></pre><p>Setting <code>root</code> to false disables this:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/serializers/application.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Serializer.extend({\n  <span class=\"hljs-attr\">root</span>: <span class=\"hljs-literal\">false</span>\n});</code></pre>\n<p>Now the response looks like:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-selector-tag\">GET</span> /<span class=\"hljs-selector-tag\">authors</span>/<span class=\"hljs-selector-tag\">1</span>\n\n{\n  <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">'Link'</span>\n}</code></pre></div>","lineNumber":252,"access":"public","tags":[],"file":"ember-cli-mirage/serializer","type":"any","isStatic":false,"decorators":[]},{"name":"embed","description":"<div class=\"docs-md\"><p>Set whether related models should be embedded or sideloaded.</p>\n<p><em>Doesn&#39;t apply to JSONAPISerializer.</em></p>\n<p>By default this false, so relationships are sideloaded:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-selector-tag\">GET</span> /<span class=\"hljs-selector-tag\">authors</span>/<span class=\"hljs-selector-tag\">1</span>\n\n{\n  <span class=\"hljs-attribute\">author</span>: {\n    <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">'Link'</span>,\n    <span class=\"hljs-attribute\">blogPostIds</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n  },\n  <span class=\"hljs-attribute\">blogPosts</span>: [\n    { <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attribute\">authorId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'Lorem'</span> },\n    { <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attribute\">authorId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'Ipsum'</span> }\n  ]\n}</code></pre><p>Setting <code>embed</code> to true will embed related records:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/serializers/application.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Serializer.extend({\n  <span class=\"hljs-attr\">embed</span>: <span class=\"hljs-literal\">true</span>\n});</code></pre>\n<p>Now the response looks like:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-selector-tag\">GET</span> /<span class=\"hljs-selector-tag\">authors</span>/<span class=\"hljs-selector-tag\">1</span>\n\n{\n  <span class=\"hljs-attribute\">author</span>: {\n    <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">'Link'</span>,\n    <span class=\"hljs-attribute\">blogPosts</span>: [\n      { <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attribute\">authorId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'Lorem'</span> },\n      { <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attribute\">authorId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'Ipsum'</span> }\n    ]\n  }\n}</code></pre></div>","lineNumber":303,"access":"public","tags":[],"file":"ember-cli-mirage/serializer","type":"any","isStatic":false,"decorators":[]},{"name":"serializeIds","description":"<div class=\"docs-md\"><p>Use this to define how your serializer handles serializing relationship keys. It can take one of three values:</p>\n<ul>\n<li><code>included</code>, which is the default, will serialize the ids of a relationship if that relationship is included (sideloaded) along with the model or collection in the response</li>\n<li><code>always</code> will always serialize the ids of all relationships for the model or collection in the response</li>\n<li><code>never</code> will never serialize the ids of relationships for the model or collection in the response</li>\n</ul>\n<p><em>Note: this feature was added in 0.2.2.</em></p></div>","lineNumber":317,"access":"public","tags":[],"file":"ember-cli-mirage/serializer","type":"any","isStatic":false,"decorators":[]}],"methods":[{"name":"serialize","description":"<div class=\"docs-md\"><p>Override this method to implement your own custom serialize function. <em>response</em> is whatever was returned from your route handler, and <em>request</em> is the Pretender request object.</p>\n<p>Returns a plain JavaScript object or array, which Mirage uses as the response data to your Ember app&#39;s XHR request.</p>\n<p>You can also override this method, call super, and manipulate the data before Mirage responds with it. This is a great place to add metadata, or for one-off operations that don&#39;t fit neatly into any of Mirage&#39;s other abstractions:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">serialize(object, request) {\n  <span class=\"hljs-comment\">// This is how to call super, as Mirage borrows [Backbone's implementation of extend](http://backbonejs.org/#Model-extend)</span>\n  <span class=\"hljs-keyword\">let</span> json = Serializer.prototype.serialize.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n\n  <span class=\"hljs-comment\">// Add metadata, sort parts of the response, etc.</span>\n\n  <span class=\"hljs-keyword\">return</span> json;\n}</code></pre></div>","lineNumber":342,"access":"public","tags":[],"file":"ember-cli-mirage/serializer","returns":{"type":" Object ","description":"the json response","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"primaryResource","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"request","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"normalize","description":"<div class=\"docs-md\"><p>This method is used by the POST and PUT shorthands. These shorthands expect a valid JSON:API document as part of the request, so that they know how to create or update the appropriate resouce. The <em>normalize</em> method allows you to transform your request body into a JSON:API document, which lets you take advantage of the shorthands when you otherwise may not be able to.</p>\n<p>Note that this method is a noop if you&#39;re using JSON:API already, since request payloads sent along with POST and PUT requests will already be in the correct format.</p>\n<p>Take a look at the included <a href=\"https://github.com/samselikoff/ember-cli-mirage/blob/master/addon/serializers/active-model-serializer.js#L22\"  class=\"docs-md__a\">ActiveModelSerializer&#39;s normalize method</a> for an example.</p></div>","lineNumber":357,"access":"public","tags":[{"name":"method","value":"normalize"}],"file":"ember-cli-mirage/serializer","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"json","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"keyForModel","description":"<div class=\"docs-md\"><p>Used to define a custom key when serializing a primary model of modelName <em>modelName</em>. For example, the default Serializer will return something like the following:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-selector-tag\">GET</span> /<span class=\"hljs-selector-tag\">blogPosts</span>/<span class=\"hljs-selector-tag\">1</span>\n\n{\n  <span class=\"hljs-attribute\">blogPost</span>: {\n    <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'Lorem ipsum'</span>\n  }\n}</code></pre><p>If your API uses hyphenated keys, you could overwrite <code>keyForModel</code>:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// serializers/application.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Serializer.extend({\n  keyForModel(modelName) {\n    <span class=\"hljs-keyword\">return</span> Ember.String.dasherize(modelName);\n  }\n});</code></pre>\n<p>Now the response will look like</p>\n<pre class=\"docs-md__code\"><code>{\n  <span class=\"hljs-string\">'blog-post'</span>: {\n    <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 1,\n    title</span>: <span class=\"hljs-string\">'Lorem ipsum'</span>\n  }\n}</code></pre></div>","lineNumber":567,"access":"public","tags":[{"name":"method","value":"keyForModel"}],"file":"ember-cli-mirage/serializer","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"modelName","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"keyForCollection","description":"<div class=\"docs-md\"><p>Used to customize the key when serializing a primary collection. By default this pluralizes the return value of <code>keyForModel</code>.</p>\n<p>For example, by default the following request may look like:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-selector-tag\">GET</span> /<span class=\"hljs-selector-tag\">blogPosts</span>\n\n{\n  <span class=\"hljs-attribute\">blogPosts</span>: [\n    {\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'Lorem ipsum'</span>\n    },\n    ...\n  ]\n}</code></pre><p>If your API hyphenates keys, you could overwrite <code>keyForCollection</code>:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// serializers/application.js</span>\n<span class=\"hljs-keyword\">const</span> { dasherize, pluralize } = Ember.String;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Serializer.extend({\n  keyForCollection(modelName) {\n    <span class=\"hljs-keyword\">return</span> pluralize(dasherize(modelName));\n  }\n});</code></pre>\n<p>Now the response would look like:</p>\n<pre class=\"docs-md__code\"><code>{\n  <span class=\"hljs-string\">'blog-posts'</span>: [\n    {\n      <span class=\"hljs-attribute\">id:</span><span class=\"hljs-string\"> 1,\n      title</span>: <span class=\"hljs-string\">'Lorem ipsum'</span>\n    },\n    ...\n  ]\n}</code></pre></div>","lineNumber":621,"access":"public","tags":[{"name":"method","value":"keyForCollection"}],"file":"ember-cli-mirage/serializer","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"modelName","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"keyForAttribute","description":"<div class=\"docs-md\"><p>Used to customize how a model&#39;s attribute is formatted in your JSON payload.</p>\n<p>By default, model attributes are camelCase:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-selector-tag\">GET</span> /<span class=\"hljs-selector-tag\">authors</span>/<span class=\"hljs-selector-tag\">1</span>\n\n{\n  <span class=\"hljs-attribute\">author</span>: {\n    <span class=\"hljs-attribute\">firstName</span>: <span class=\"hljs-string\">'Link'</span>,\n    <span class=\"hljs-attribute\">lastName</span>: <span class=\"hljs-string\">'The WoodElf'</span>\n  }\n}</code></pre><p>If your API expects snake case, you could write the following:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// serializers/application.js</span>\n<span class=\"hljs-keyword\">const</span> { underscore } = Ember.String;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Serializer.extend({\n  keyForAttribute(attr) {\n    <span class=\"hljs-keyword\">return</span> underscore(attr);\n  }\n});</code></pre>\n<p>Now the response would look like:</p>\n<pre class=\"docs-md__code\"><code>{\n  <span class=\"hljs-attribute\">author</span>: {\n    first_name: <span class=\"hljs-string\">'Link'</span>,\n    last_name: <span class=\"hljs-string\">'The WoodElf'</span>\n  }\n}</code></pre></div>","lineNumber":779,"access":"public","tags":[{"name":"method","value":"keyForAttribute"}],"file":"ember-cli-mirage/serializer","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"attr","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"keyForRelationship","description":"<div class=\"docs-md\"><p>Use this hook to format the key for collections related to this model. <em>modelName</em> is the named parameter for the relationship.</p>\n<p>For example, if you&#39;re serializing an <code>author</code> that\nsideloads many <code>blogPosts</code>, the default response will look like:</p>\n<pre class=\"docs-md__code\"><code>{\n  author: <span class=\"hljs-meta\">{...}</span>,\n  blogPosts: [...]\n}</code></pre><p>Overwrite <code>keyForRelationship</code> to format this key:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// serializers/application.js</span>\n<span class=\"hljs-keyword\">const</span> { underscore } = Ember.String;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Serializer.extend({\n  keyForRelationship(modelName) {\n    <span class=\"hljs-keyword\">return</span> underscore(modelName);\n  }\n});</code></pre>\n<p>Now the response will look like this:</p>\n<pre class=\"docs-md__code\"><code>{\n  author: <span class=\"hljs-meta\">{...}</span>,\n  blog_posts: [...]\n}</code></pre></div>","lineNumber":822,"access":"public","tags":[{"name":"method","value":"keyForRelationship"}],"file":"ember-cli-mirage/serializer","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"modelName","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"keyForEmbeddedRelationship","description":"<div class=\"docs-md\"><p>Like <code>keyForRelationship</code>, but for embedded relationships.</p></div>","lineNumber":833,"access":"public","tags":[{"name":"method","value":"keyForEmbeddedRelationship"}],"file":"ember-cli-mirage/serializer","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"attributeName","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"keyForRelationshipIds","description":"<div class=\"docs-md\"><p>Use this hook to format the key for relationship ids\nin this model&#39;s JSON representation.</p>\n<p>For example, if you&#39;re serializing an <code>author</code> that\nsideloads many <code>blogPosts</code>, your <code>author</code> JSON would include a <code>blogPostIds</code> key:</p>\n<pre class=\"docs-md__code\"><code>{\n  <span class=\"hljs-attribute\">author</span>: {\n    id: <span class=\"hljs-number\">1</span>,\n    blogPostIds: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n  },\n  <span class=\"hljs-selector-tag\">blogPosts</span>: <span class=\"hljs-selector-attr\">[...]</span>\n}</code></pre><p>Overwrite <code>keyForRelationshipIds</code> to format this key:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// serializers/application.js</span>\n<span class=\"hljs-keyword\">const</span> { underscore } = Ember.String;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Serializer.extend({\n  keyForRelationshipIds(relationship) {\n    <span class=\"hljs-keyword\">return</span> underscore(relationship) + <span class=\"hljs-string\">'_ids'</span>;\n  }\n});</code></pre>\n<p>Now the response will look like:</p>\n<pre class=\"docs-md__code\"><code>{\n  <span class=\"hljs-attribute\">author</span>: {\n    id: <span class=\"hljs-number\">1</span>,\n    blog_post_ids: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n  },\n  <span class=\"hljs-selector-tag\">blogPosts</span>: <span class=\"hljs-selector-attr\">[...]</span>\n}</code></pre></div>","lineNumber":883,"access":"public","tags":[{"name":"method","value":"keyForRelationshipIds"}],"file":"ember-cli-mirage/serializer","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"modelName","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"typeKeyForModel","description":"<div class=\"docs-md\"><p>This hook is only available on the JSONAPISerializer.</p>\n<p>Use this hook to override the generated <code>type</code> for the JSON:API resource object. By default, <code>type</code> will be the plural and dasherized form of the model name.</p>\n<p>For example, if you wanted singularized types:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> JSONAPISerializer.extend({\n  typeKeyForModel(model) {\n    <span class=\"hljs-keyword\">return</span> dasherize(singularize(model.modelName));\n  }\n});</code></pre></div>","lineNumber":917,"access":"public","tags":[{"name":"method","value":"typeKeyForModel"}],"file":"ember-cli-mirage/serializer","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"model","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"links","description":"<div class=\"docs-md\"><p>This hook is only available on the JSONAPISerializer.</p>\n<p>Use this hook to add top-level <code>links</code> data to JSON:API resource objects. The argument is the model being serialized.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// serializers/author.js</span>\n<span class=\"hljs-keyword\">import</span> { JSONAPISerializer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-cli-mirage'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> JSONAPISerializer.extend({\n\n  links(author) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-string\">'posts'</span>: {\n        <span class=\"hljs-attr\">related</span>: <span class=\"hljs-string\">`/api/authors/<span class=\"hljs-subst\">${author.id}</span>/posts`</span>\n      }\n    };\n  }\n\n});</code></pre></div>","lineNumber":945,"access":"public","tags":[{"name":"method","value":"links"}],"file":"ember-cli-mirage/serializer","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"model","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-cli-mirage/serializer","attributes":{"file":"ember-cli-mirage/serializer","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-cli-mirage/serializer~Serializer"}]},"components":{"data":[]}}},{"type":"class","id":"ember-cli-mirage/server~Server","attributes":{"name":"Server","file":"ember-cli-mirage/server","exportType":"default","description":"<div class=\"docs-md\"><p>The Mirage server.</p>\n<p>Note that <code>this</code> within your config function in <code>mirage/config.js</code> refers to the server instance, which is the same instance that <code>server</code> refers to in your tests.</p></div>","lineNumber":156,"access":"public","isInterface":false,"decorators":[],"tags":[{"name":"class","value":"Server"}],"fields":[{"name":"db","description":"<div class=\"docs-md\"><p>Returns the Mirage Db instance.</p></div>","lineNumber":167,"access":"public","tags":[],"file":"ember-cli-mirage/server","type":"any","isStatic":false,"decorators":[]},{"name":"schema","description":"<div class=\"docs-md\"><p>Returns the Mirage Schema (ORM) instance.</p></div>","lineNumber":175,"access":"public","tags":[],"file":"ember-cli-mirage/server","type":"any","isStatic":false,"decorators":[]},{"name":"namespace","description":"<div class=\"docs-md\"><p>Set the base namespace used for all routes defined with <code>get</code>, <code>post</code>, <code>put</code> or <code>del</code>.</p>\n<p>For example,</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// app/mirage/config.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.namespace = <span class=\"hljs-string\">'/api'</span>;\n\n  <span class=\"hljs-comment\">// this route will handle the URL '/api/contacts'</span>\n  <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'/contacts'</span>, <span class=\"hljs-string\">'contacts'</span>);\n};</code></pre>\n<p>Note that only routes defined after <code>this.namespace</code> are affected. This is useful if you have a few one-off routes that you don&#39;t want under your namespace:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// app/mirage/config.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// this route handles /auth</span>\n  <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'/auth'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ ...});\n\n  <span class=\"hljs-keyword\">this</span>.namespace = <span class=\"hljs-string\">'/api'</span>;\n  <span class=\"hljs-comment\">// this route will handle the URL '/api/contacts'</span>\n  <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'/contacts'</span>, <span class=\"hljs-string\">'contacts'</span>);\n};</code></pre>\n<p>If your Ember app is loaded from the filesystem vs. a server (e.g. via Cordova or Electron vs. <code>ember s</code> or <code>https://yourhost.com/</code>), you will need to explicitly define a namespace. Likely values are <code>/</code> (if requests are made with relative paths) or <code>https://yourhost.com/api/...</code> (if requests are made to a defined server).</p>\n<p>For a sample implementation leveraging a configured API host &amp; namespace, check out <a href=\"https://github.com/samselikoff/ember-cli-mirage/issues/497#issuecomment-183458721\"  class=\"docs-md__a\">this issue comment</a>.</p></div>","lineNumber":224,"access":"public","tags":[],"file":"ember-cli-mirage/server","type":"any","isStatic":false,"decorators":[]},{"name":"urlPrefix","description":"<div class=\"docs-md\"><p>Sets a string to prefix all route handler URLs with.</p>\n<p>Useful if your Ember app makes API requests to a different port.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// app/mirage/config.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.prefix = <span class=\"hljs-string\">'http://localhost:8080'</span>\n};</code></pre></div>","lineNumber":238,"access":"public","tags":[],"file":"ember-cli-mirage/server","type":"any","isStatic":false,"decorators":[]},{"name":"timing","description":"<div class=\"docs-md\"><p>Set the number of milliseconds for the the Server&#39;s response time.</p>\n<p>By default there&#39;s a 400ms delay during development, and 0 delay in testing (so your tests run fast).</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// app/mirage/config.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.timing = <span class=\"hljs-number\">400</span>; <span class=\"hljs-comment\">// default</span>\n};</code></pre>\n<p>To set the timing for individual routes, see the <code>timing</code> option for route handlers.</p></div>","lineNumber":258,"access":"public","tags":[],"file":"ember-cli-mirage/server","type":"any","isStatic":false,"decorators":[]},{"name":"logging","description":"<div class=\"docs-md\"><p>Set to <code>true</code> or <code>false</code> to explicitly specify logging behavior.</p>\n<p>By default, server responses are logged in non-testing environments. Logging is disabled by default in testing, so as not to clutter CI test runner output.</p>\n<p>For example, to enable logging in tests, write the following:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">test(<span class=\"hljs-string\">'I can view all users'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  server.logging = <span class=\"hljs-literal\">true</span>;\n  server.create(<span class=\"hljs-string\">'user'</span>);\n\n  visit(<span class=\"hljs-string\">'/users'</span>);\n  <span class=\"hljs-comment\">// ...</span>\n});</code></pre>\n<p>You can also write a custom log message, using the <a href=\"#pretender\"  class=\"docs-md__a\">Pretender server&#39;s</a> <code>handledRequest</code> hook. See <a href=\"https://github.com/samselikoff/ember-cli-mirage/blob/2c31ad15a46e90b357a83b6896c6774fa42c6488/addon/server.js#L25\"  class=\"docs-md__a\">Mirage&#39;s default implementation</a> for an example.</p>\n<p>To override,</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/config.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.pretender.handledRequest = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">verb, path, request</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> { responseText } = request;\n    <span class=\"hljs-comment\">// log request and response data</span>\n  }\n}</code></pre></div>","lineNumber":295,"access":"public","tags":[],"file":"ember-cli-mirage/server","type":"any","isStatic":false,"decorators":[]},{"name":"testConfig","description":"<div class=\"docs-md\"><p>Export a named <code>testConfig</code> function to define routes that only apply in your test environment:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/config.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// normal config, shared across development + testing</span>\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testConfig</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// test-only config, does not apply to development</span>\n}</code></pre>\n<p>This could be useful if you&#39;d like to use Mirage in testing, but generally proxy to an actual API during development. As you develop, your frontend may be ahead of your API, in which case you&#39;d work with the routes in the default config, and write your tests. Then, once your API implements the new endpoints, you can move the routes to your testConfig, so your tests still run, but Mirage doesn&#39;t interfere during development.</p></div>","lineNumber":313,"access":"public","tags":[],"file":"ember-cli-mirage/server","type":"any","isStatic":false,"decorators":[]},{"name":"pretender","description":"<div class=\"docs-md\"><p>Mirage uses <a href=\"https://github.com/trek/pretender\"  class=\"docs-md__a\">pretender.js</a> as its xhttp interceptor. In your Mirage config, <code>this.pretender</code> refers to the actual Pretender instance, so any config options that work there will work here as well.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// app/mirage/config.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.pretender.handledRequest = <span class=\"hljs-function\">(<span class=\"hljs-params\">verb, path, request</span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Your server responded to <span class=\"hljs-subst\">${path}</span>`</span>);\n  }\n};</code></pre>\n<p>Refer to <a href=\"https://github.com/pretenderjs/pretender\"  class=\"docs-md__a\">Pretender&#39;s docs</a> if you want to change any options on your Pretender instance.</p></div>","lineNumber":367,"access":"public","tags":[],"file":"ember-cli-mirage/server","type":"any","isStatic":false,"decorators":[]}],"methods":[{"name":"passthrough","description":"<div class=\"docs-md\"><p>By default, if your Ember app makes a request that is not defined in your server config, Mirage will throw an error. You can use <code>passthrough</code> to whitelist requests, and allow them to pass through your Mirage server to the actual network layer.</p>\n<aside>\n<p>Note: Put all passthrough config at the bottom of your <code>config.js</code> file, to give your route handlers precedence.</p>\n</aside>\n\n<p>To ignore paths on your current host (as well as configured <code>namespace</code>), use a leading <code>/</code>:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">this</span>.passthrough(<span class=\"hljs-string\">'/addresses'</span>);</code></pre>\n<p>You can also pass a list of paths, or call <code>passthrough</code> multiple times:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">this</span>.passthrough(<span class=\"hljs-string\">'/addresses'</span>, <span class=\"hljs-string\">'/contacts'</span>);\n<span class=\"hljs-keyword\">this</span>.passthrough(<span class=\"hljs-string\">'/something'</span>);\n<span class=\"hljs-keyword\">this</span>.passthrough(<span class=\"hljs-string\">'/else'</span>);</code></pre>\n<p>These lines will allow all HTTP verbs to pass through. If you want only certain verbs to pass through, pass an array as the last argument with the specified verbs:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">this</span>.passthrough(<span class=\"hljs-string\">'/addresses'</span>, [<span class=\"hljs-string\">'post'</span>]);\n<span class=\"hljs-keyword\">this</span>.passthrough(<span class=\"hljs-string\">'/contacts'</span>, <span class=\"hljs-string\">'/photos'</span>, [<span class=\"hljs-string\">'get'</span>]);</code></pre>\n<p>If you want all requests on the current domain to pass through, simply invoke the method with no arguments:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">this</span>.passthrough();</code></pre>\n<p>Note again that the current namespace (i.e. any <code>namespace</code> property defined above this call) will be applied.</p>\n<p>You can also allow other-origin hosts to passthrough. If you use a fully-qualified domain name, the <code>namespace</code> property will be ignored. Use two * wildcards to match all requests under a path:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">this</span>.passthrough(<span class=\"hljs-string\">'http://api.foo.bar/**'</span>);\n<span class=\"hljs-keyword\">this</span>.passthrough(<span class=\"hljs-string\">'http://api.twitter.com/v1/cards/**'</span>);</code></pre>\n<p>In versions of Pretender prior to 0.12, <code>passthrough</code> only worked with jQuery &gt;= 2.x. As long as you&#39;re on Pretender@0.12 or higher, you should be all set.</p></div>","lineNumber":497,"access":"public","tags":[{"name":"method","value":"passthrough"}],"file":"ember-cli-mirage/server","returns":null,"params":[{"nullable":null,"spread":false,"optional":true,"name":"...paths","description":"Any numer of paths to whitelist","type":"String"},{"nullable":null,"spread":false,"optional":false,"name":"options","description":"Unused","type":"Array"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"loadFixtures","description":"<div class=\"docs-md\"><p>By default, all the data files under <code>/fixtures</code> will be loaded during testing if you don&#39;t have factories defined, and during development if you don&#39;t have <code>/scenarios/default.js</code> defined. You can use <code>loadFixtures()</code> to also load fixture files in either of these environments, in addition to using factories to seed your database.</p>\n<p><code>server.loadFixtures()</code> loads all the files, and <code>server.loadFixtures(file1, file2...)</code> loads selective fixture files.</p>\n<p>For example, in a test you may want to start out with all your fixture data loaded:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">test(<span class=\"hljs-string\">'I can view the photos'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  server.loadFixtures();\n  server.createList(<span class=\"hljs-string\">'photo'</span>, <span class=\"hljs-number\">10</span>);\n\n  visit(<span class=\"hljs-string\">'/'</span>);\n\n  andThen(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    equal( find(<span class=\"hljs-string\">'img'</span>).length, <span class=\"hljs-number\">10</span> );\n  });\n});</code></pre>\n<p>or in development, you may want to load a few reference fixture files, and use factories to define the rest of your data:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// scenarios/default.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">server</span>) </span>{\n  server.loadFixtures(<span class=\"hljs-string\">'countries'</span>, <span class=\"hljs-string\">'states'</span>);\n\n  <span class=\"hljs-keyword\">let</span> author = server.create(<span class=\"hljs-string\">'author'</span>);\n  server.createList(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-number\">10</span>, {<span class=\"hljs-attr\">author_id</span>: author.id});\n}</code></pre></div>","lineNumber":552,"access":"public","tags":[{"name":"method","value":"loadFixtures"}],"file":"ember-cli-mirage/server","returns":null,"params":[{"nullable":null,"spread":false,"optional":true,"name":"...args","description":"The name of the fixture to load.","type":"String"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"create","description":"<div class=\"docs-md\"><p>Generates a single model of type <em>type</em>, inserts it into the database (giving it an id), and returns the data that was\nadded.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">test(<span class=\"hljs-string\">\"I can view a contact's details\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> contact = server.create(<span class=\"hljs-string\">'contact'</span>);\n\n  visit(<span class=\"hljs-string\">'/contacts/'</span> + contact.id);\n\n  andThen(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    equal( find(<span class=\"hljs-string\">'h1'</span>).text(), <span class=\"hljs-string\">'The contact is Link'</span>);\n  });\n});</code></pre>\n<p>You can override the attributes from the factory definition with a\nhash passed in as the second parameter. For example, if we had this factory</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Factory.extend({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Link'</span>\n});</code></pre>\n<p>we could override the name like this:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">test(<span class=\"hljs-string\">\"I can view the contacts\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  server.create(<span class=\"hljs-string\">'contact'</span>, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Zelda'</span>});\n\n  visit(<span class=\"hljs-string\">'/'</span>);\n\n  andThen(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    equal( find(<span class=\"hljs-string\">'p'</span>).text(), <span class=\"hljs-string\">'Zelda'</span> );\n  });\n});</code></pre></div>","lineNumber":686,"access":"public","tags":[{"name":"method","value":"create"}],"file":"ember-cli-mirage/server","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"type","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"traitsAndOverrides","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"createList","description":"<div class=\"docs-md\"><p>Creates <em>amount</em> models of type <em>type</em>, optionally overriding the attributes from the factory with <em>attrs</em>.</p>\n<p>Returns the array of records that were added to the database.</p>\n<p>Here&#39;s an example from a test:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">test(<span class=\"hljs-string\">\"I can view the contacts\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  server.createList(<span class=\"hljs-string\">'contact'</span>, <span class=\"hljs-number\">5</span>);\n  <span class=\"hljs-keyword\">var</span> youngContacts = server.createList(<span class=\"hljs-string\">'contact'</span>, <span class=\"hljs-number\">5</span>, {<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">15</span>});\n\n  visit(<span class=\"hljs-string\">'/'</span>);\n\n  andThen(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    equal(currentRouteName(), <span class=\"hljs-string\">'index'</span>);\n    equal( find(<span class=\"hljs-string\">'p'</span>).length, <span class=\"hljs-number\">10</span> );\n  });\n});</code></pre>\n<p>And one from setting up your development database:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// mirage/scenarios/default.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">server</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> contact = server.create(<span class=\"hljs-string\">'contact'</span>);\n  server.createList(<span class=\"hljs-string\">'address'</span>, <span class=\"hljs-number\">5</span>, {<span class=\"hljs-attr\">contactId</span>: contact.id});\n}</code></pre></div>","lineNumber":768,"access":"public","tags":[{"name":"method","value":"createList"}],"file":"ember-cli-mirage/server","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"type","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"amount","description":"","type":"any"},{"nullable":null,"spread":false,"optional":false,"name":"traitsAndOverrides","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-cli-mirage/server","attributes":{"file":"ember-cli-mirage/server","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-cli-mirage/server~Server"}]},"components":{"data":[]}}}]}
